package leetCode;

import java.util.ArrayList;
import java.util.LinkedList;

public class TreeNode {
	// Definition for a binary tree node.

	    int val;
	    TreeNode left;
	    TreeNode right;
	    TreeNode() {}
	    TreeNode(int val) { this.val = val; }
	    TreeNode(int val, TreeNode left, TreeNode right) {
	        this.val = val;
	        this.left = left;
	        this.right = right;
	    }
	}

	public class LevelOrderTraversal {
	    
	    public List<List<Integer>> levelOrder(TreeNode root) {
	        List<List<Integer>> result = new ArrayList<>();
	        if (root == null) return result;
	        
	        Queue<TreeNode> queue = new LinkedList<>();
	        queue.offer(root);
	        
	        while (!queue.isEmpty()) {
	            int levelSize = queue.size();
	            List<Integer> levelValues = new ArrayList<>();
	            
	            for (int i = 0; i < levelSize; i++) {
	                TreeNode node = queue.poll();
	                levelValues.add(node.val);
	                
	                if (node.left != null) {
	                    queue.offer(node.left);
	                }
	                if (node.right != null) {
	                    queue.offer(node.right);
	                }
	            }
	            
	            result.add(levelValues);
	        }
	        
	        return result;
	    }
	    
	    public static void main(String[] args) {
	        // Example usage:
	        // Constructing the following binary tree:
	        //       3
	        //     /   \
	        //    9    20
	        //        /  \
	        //       15   7
	        TreeNode root = new TreeNode(3);
	        root.left = new TreeNode(9);
	        root.right = new TreeNode(20);
	        root.right.left = new TreeNode(15);
	        root.right.right = new TreeNode(7);
	        
	        LevelOrderTraversal traversal = new LevelOrderTraversal();
	        List<List<Integer>> result = traversal.levelOrder(root);
	        
	        // Output the result
	        System.out.println(result);
	    }
	    
}

