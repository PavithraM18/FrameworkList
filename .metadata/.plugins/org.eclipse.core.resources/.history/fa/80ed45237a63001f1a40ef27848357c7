package Programs;

public class LongestPalindromicSubsequence {

	public static int longestPalindromeSubseq(String s) {
        int n = s.length();
        int[][] dp = new int[n][n];


        // Fill the diagonal with 1s (single characters are palindromes)
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }

        // Fill the dp table in a bottom-up manner
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = dp[i + 1][j - 1] + 2; // If characters match, add 2 to the length of the substring between i+1 and j-1
                } else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]); // Consider both cases where the current characters don't match
                }
            }
        }

        return dp[0][n - 1];
    }

    public static void main(String[] args) {
        String s = "abcabcd";
        System.out.println("Length of the longest palindromic subsequence: " + longestPalindromeSubseq(s));
    }
}
