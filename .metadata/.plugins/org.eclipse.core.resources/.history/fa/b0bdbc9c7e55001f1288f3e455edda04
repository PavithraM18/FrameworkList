package uploaddownload;

import java.io.FileInputStream;
import java.io.IOException;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Iterator;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.util.NumberToTextConverter;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

public class UploadDownload {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub

		String fruitName = "Apple";
		String actualMsg = "Updated Excel Data Successfully.";
		String fileName = "C:\\Users\\pavithra.mathivanan\\Downloads\\download.xlsx";
		WebDriver driver = new FirefoxDriver();
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		driver.get("https://rahulshettyacademy.com/upload-download-test/index.html");
		//download
		driver.findElement(By.id("downloadButton")).click();
		
		//edit excel  -get column number of price -- get row number of apple
		
		int col = getColumnNumber(fileName ,"price");
		int row = getRowNumber(fileName ,"Apple");
		updateCell(fileName,row,col,"599");
		
		//upload 
		WebElement upload = driver.findElement(By.cssSelector("input[type = 'file']"));
		upload.sendKeys("C:\\Users\\pavithra.mathivanan\\Downloads\\download.xlsx");
		
		//wait for success msg to appear and wait for disappear 
		WebElement msg = driver.findElement(By.xpath("//div[@class = 'Toastify__toast-body'] //div[2]"));
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".Toastify__toast-icon.Toastify--animate-icon.Toastify__zoom-enter")));		
		String exceptedMsg = msg.getText();
		System.out.println(exceptedMsg);
		Assert.assertEquals(actualMsg, exceptedMsg);
		
		wait.until(ExpectedConditions.invisibilityOfElementLocated(By.cssSelector(".Toastify__toast-icon.Toastify--animate-icon.Toastify__zoom-enter")));		
		
		
		//verify updated excel data showing in the table
		String priceColounmnId = driver.findElement(By.xpath("//div[text() ='Price']")).getAttribute("data-column-id");
		System.out.println(priceColounmnId);
		String actualPrice = driver.findElement(By.xpath("//div[text() ='"+fruitName+"']/parent::div/parent::div/div[@id='cell-"+priceColounmnId+"-undefined']")).getText();
		System.out.println(actualPrice);
		Assert.assertEquals("345", actualPrice);
	}

	private static void updateCell(String fileName, int row, int col, String string) {
		// TODO Auto-generated method stub
		
	}

	private static int getRowNumber(String fileName, String rowName) throws IOException {
		// TODO Auto-generated method stub
		ArrayList<String> a = new ArrayList<String>();
		FileInputStream fis = new FileInputStream(fileName);
		XSSFWorkbook wb = new XSSFWorkbook(fis);
		XSSFSheet sheet = wb.getSheet("Sheet1");
		Iterator<Row> rows = sheet.rowIterator();
		int k = 1;
		int rowIndex = -1;
		while(rows.hasNext())
		{
			Row row = rows.next();
			Iterator<Cell> cellls = row.cellIterator(); 
			while(cellls.hasNext())
			{
				Cell value = cellls.next();
				if (value.getStringCellValue().equalsIgnoreCase(rowName))
				{
					rowIndex = k;
				}
				k++;
			}
		}
		return rowIndex;	
	}

	private static int getColumnNumber(String fileName, String colName) throws IOException {
		// TODO Auto-generated method stub
		FileInputStream fis = new FileInputStream(fileName);
		XSSFWorkbook wb = new XSSFWorkbook(fis);
		XSSFSheet sheet = wb.getSheet("Sheet1");
		Iterator<Row> rows = sheet.rowIterator();
		Row firstRow = rows.next(); 
		Iterator<Cell> cellls = firstRow.cellIterator();  // row is the collection of cells
		int k = 1; 
		int coloumn = 0;
		while (cellls.hasNext())
		{
			Cell value = cellls.next();
			if (value.getStringCellValue().equalsIgnoreCase(colName))
			{
				//desired column
				coloumn = k;
			}
			k++;
		}
		System.out.println(coloumn);
		return coloumn;
	}

}
