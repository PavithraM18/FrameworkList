package Programs;

public class LongestPalindromicSubsequence {

    // Function to find the length of the longest palindromic subsequence
    public static int longestPalindromicSubsequence(String s) {
        int n = s.length();
        // Create a 2D DP array
        int[][] dp = new int[n][n];
        
        // Base case: single characters are palindromes of length 1
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        
        // Fill the table
        // Start with substrings of length 2 up to length n
        for (int length = 2; length <= n; length++) {
            for (int i = 0; i < n - length + 1; i++) {
                int j = i + length - 1;
                
                if (s.charAt(i) == s.charAt(j)) {
                    // Characters match, include them in the palindrome
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                } else {
                    // Characters don't match, take the max of excluding either character
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        
        // The result is in the top-right cell of the DP array
        return dp[0][n - 1];
    }

    public static void main(String[] args) {
        String s = "bbbab";
        System.out.println("Length of the longest palindromic subsequence: " + longestPalindromicSubsequence(s));
    }
}
